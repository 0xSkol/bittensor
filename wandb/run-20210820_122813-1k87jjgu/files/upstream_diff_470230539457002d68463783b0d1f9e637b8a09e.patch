diff --git a/miners/text/template_validator.py b/miners/text/template_validator.py
index 614cfb1..3cfc8f7 100644
--- a/miners/text/template_validator.py
+++ b/miners/text/template_validator.py
@@ -163,20 +163,19 @@ def main( config ):
 
                 # Take topk chain weights.
                 real_topk = min( config.miner.n_topk_chain_weights, metagraph.n.item() ) 
-                topk_weights, topk_uids = torch.topk( validator.chain_weights, k = real_topk )
-                normalized_topk_weights = torch.nn.functional.normalize( topk_weights - torch.min( topk_weights ), p = 1, dim = 0)
+                topk_weights, topk_uids = torch.topk( F.softmax( validator.chain_weights ), k = real_topk )
+                final_weights = torch.nn.functional.normalize( topk_weights - torch.min( topk_weights ), p = 1, dim = 0)
 
                 # Step logs.
                 info = { 'Loss': colored('{:.4f}'.format(loss.item()), 'green')}
-                for uid in range( metagraph.n.item() ):
-                    weight_grad = validator.chain_weights.grad[ uid ]
-                    info[ str(uid) ] = colored('{:.4f}'.format(normalized_topk_weights[ uid ]), 'green' if weight_grad < 0 else 'red')
+                for weight, uid in enumerate(list(zip(final_weights.tolist(), topk_uids.tolist()))):
+                    info[ str(uid) ] = colored('{:.4f}'.format( weight ), 'green' if validator.chain_weights.grad[ uid ] < 0 else 'red')
                 progress_bar.set_infos( info )
 
             # ---  Set mechanism weights.
             subtensor.set_weights (
                 uids = topk_uids,
-                weights = normalized_topk_weights,
+                weights = final_weights,
                 wait_for_inclusion = False,
                 wallet = wallet,
             )    
@@ -200,8 +199,8 @@ def main( config ):
                 'Rank': metagraph.R[ uid ].item(),
                 'Incentive': metagraph.I[ uid ].item(),
             } 
-            for uid_j, val in enumerate(validator.chain_weights.tolist()):
-                wand_data[ 'w_{},{}'.format( uid, uid_j ) ] = val
+            for weight, uid_j in enumerate(list(zip(final_weights.tolist(), topk_uids.tolist()))):
+                if weight != 0: wand_data[ 'w_{},{}'.format( uid, uid_j ) ] = weight
             wandb.log( wand_data )
 
 if __name__ == "__main__":
